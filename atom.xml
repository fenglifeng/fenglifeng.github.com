<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Feng Lifeng's Blog]]></title>
  <link href="http://fenglifeng.github.com/atom.xml" rel="self"/>
  <link href="http://fenglifeng.github.com/"/>
  <updated>2012-12-14T10:46:14+08:00</updated>
  <id>http://fenglifeng.github.com/</id>
  <author>
    <name><![CDATA[Feng Lifeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[信号笔记]]></title>
    <link href="http://fenglifeng.github.com/blog/2012/12/13/signal/"/>
    <updated>2012-12-13T22:49:00+08:00</updated>
    <id>http://fenglifeng.github.com/blog/2012/12/13/signal</id>
    <content type="html"><![CDATA[<p>可重入函数：可重入即表示重复进入，首先意味着这个函数可以被中断；其次意味着它除了使用自己栈上的资源以外不依赖任何环境(包括static),这样的函数就是可重入的，可以允许有该函数的多个副本在运行，由于他们使用的是分离的栈，所以不会相互干扰。如果确实需要访问全局变量(包括static)，一定要用注意实施互斥手段。</p>

<p>1) SIGHUP
本信号在用户终端连接(正常或非正常)结束时发出, 通常是在终端的控制进程结束时, 通知同一session内的各个作业, 这时它们与控制终端不再关联。
登录Linux时，系统会分配给登录用户一个终端(Session)。在这个终端运行的所有程序，包括前台进程组和后台进程组，一般都属于这个 Session。当用户退出Linux登录时，前台进程组和后台有对终端输出的进程将会收到SIGHUP信号。这个信号的默认操作为终止进程，因此前台进 程组和后台有终端输出的进程就会中止。不过可以捕获这个信号，比如wget能捕获SIGHUP信号，并忽略它，这样就算退出了Linux登录，wget也 能继续下载。
此外，对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。</p>

<p>2) SIGINT
程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl-C)时发出，用于通知前台进程组终止进程。</p>

<p>3) SIGQUIT
和SIGINT类似, 但由QUIT字符(通常是Ctrl-/)来控制. 进程在因收到SIGQUIT退出时会产生core文件, 在这个意义上类似于一个程序错误信号。</p>

<p>4) SIGILL
执行了非法指令. 通常是因为可执行文件本身出现错误, 或者试图执行数据段. 堆栈溢出时也有可能产生这个信号。</p>

<p>5) SIGTRAP
由断点指令或其它trap指令产生. 由debugger使用。</p>

<p>6) SIGABRT
调用abort函数生成的信号。</p>

<p>7) SIGBUS
非法地址, 包括内存地址对齐(alignment)出错。比如访问一个四个字长的整数, 但其地址不是4的倍数。它与SIGSEGV的区别在于后者是由于对合法存储地址的非法访问触发的(如访问不属于自己存储空间或只读存储空间)。</p>

<p>8) SIGFPE
在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。</p>

<p>9) SIGKILL
用来立即结束程序的运行. 本信号不能被阻塞、处理和忽略。如果管理员发现某个进程终止不了，可尝试发送这个信号。</p>

<p>10) SIGUSR1
留给用户使用
试图访问未分配给自己的内存, 或试图往没有写权限的内存地址写数据.</p>

<p>12) SIGUSR2
留给用户使用</p>

<p>13) SIGPIPE
管道破裂。这个信号通常在进程间通信产生，比如采用FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到SIGPIPE信号。此外用Socket通信的两个进程，写进程在写Socket的时候，读进程已经终止。</p>

<p>14) SIGALRM
时钟定时信号, 计算的是实际的时间或时钟时间. alarm函数使用该信号.</p>

<p>15) SIGTERM
程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理。通常用来要求程序自己正常退出，shell命令kill缺省产生这个信号。如果进程终止不了，我们才会尝试SIGKILL。</p>

<p>17) SIGCHLD
子进程结束时, 父进程会收到这个信号。</p>

<p>如果父进程没有处理这个信号，也没有等待(wait)子进程，子进程虽然终止，但是还会在内核进程表中占有表项，这时的子进程称为僵尸进程。这种情 况我们应该避免(父进程或者忽略SIGCHILD信号，或者捕捉它，或者wait它派生的子进程，或者父进程先终止，这时子进程的终止自动由init进程来接管)。</p>

<p>18) SIGCONT
让一个停止(stopped)的进程继续执行. 本信号不能被阻塞. 可以用一个handler来让程序在由stopped状态变为继续执行时完成特定的工作. 例如, 重新显示提示符&#8230;</p>

<p>19) SIGSTOP
停止(stopped)进程的执行. 注意它和terminate以及interrupt的区别:该进程还未结束, 只是暂停执行. 本信号不能被阻塞, 处理或忽略.</p>

<p>20) SIGTSTP
停止进程的运行, 但该信号可以被处理和忽略. 用户键入SUSP字符时(通常是Ctrl-Z)发出这个信号</p>

<p>21) SIGTTIN
当后台作业要从用户终端读数据时, 该作业中的所有进程会收到SIGTTIN信号. 缺省时这些进程会停止执行.</p>

<p>22) SIGTTOU
类似于SIGTTIN, 但在写终端(或修改终端模式)时收到.</p>

<p>23) SIGURG
有&#8221;紧急&#8221;数据或out-of-band数据到达socket时产生.</p>

<p>24) SIGXCPU
超过CPU时间资源限制. 这个限制可以由getrlimit/setrlimit来读取/改变。</p>

<p>25) SIGXFSZ
当进程企图扩大文件以至于超过文件大小资源限制。</p>

<p>26) SIGVTALRM
虚拟时钟信号. 类似于SIGALRM, 但是计算的是该进程占用的CPU时间.</p>

<p>27) SIGPROF
类似于SIGALRM/SIGVTALRM, 但包括该进程用的CPU时间以及系统调用的时间.</p>

<p>28) SIGWINCH
窗口大小改变时发出.</p>

<p>29) SIGIO
文件描述符准备就绪, 可以开始进行输入/输出操作.</p>

<p>30) SIGPWR
Power failure</p>

<p>31) SIGSYS
非法的系统调用。</p>

<p>在以上列出的信号中，程序不可捕获、阻塞或忽略的信号有：SIGKILL,SIGSTOP<br/>
不能恢复至默认动作的信号有：SIGILL,SIGTRAP<br/>
默认会导致进程流产的信号有：<br/>
SIGABRT,SIGBUS,SIGFPE,SIGILL,SIGIOT,SIGQUIT,SIGSEGV,SIGTRAP,SIGXCPU,SIGXFSZ<br/>
默认会导致进程退出的信号有：<br/>
SIGALRM,SIGHUP,SIGINT,SIGKILL,SIGPIPE,SIGPOLL,SIGPROF,SIGSYS,SIGTERM,SIGUSR1,SIGUSR2,SIGVTALRM<br/>
默认会导致进程停止的信号有：SIGSTOP,SIGTSTP,SIGTTIN,SIGTTOU<br/>
默认进程忽略的信号有：SIGCHLD,SIGPWR,SIGURG,SIGWINCH</p>

<p>shell中的kill:不带参数的话发送的是SIGTERM，可以被阻塞和无视，无视的可能行很大。kill -9的话就是发送SIGKILL        <br/>
SIGINT是有Ctrl＋C触发的</p>

<p>unix中最简单的信号函数就是signal                                                                                 <br/>
void (*signal(int signo,void(*func)(int))(int)                                                                 <br/>
for:signal(SIGUSR1,sigusr)                                                                                       <br/>
其中sigusr要是可重入的函数。</p>

<p>kill函数将信号发送给进程或者进程组                                                                               <br/>
int kill(pid_t pid,int signo)                                                                                   <br/>
pid>0 发送给id为pid的进程                                                                                        <br/>
pid==0 发送给发送进程同一组的所有进程                                                                            <br/>
pid《0 绝对值为Pid的进程                                                                                         <br/>
pid ==-1 发送给发送进程有权限向它们发送信号的系统上的所有进程                                                    <br/>
raise向自身进程发信号                                                                                            <br/>
int raise(int signo)                                                                                             <br/>
raise(sig) 等价于kill(getpid(),sig)</p>

<p>alarm是一个定时器，当时间溢出后会产生一个SIGALRM信号，如果不忽略或者不捕获该信号，其默认动作是终止调用该alarm函??   的进程<br/>
unsigned int alarm(unsigned int seconds)</p>

<p>pause使进程挂起直至捕获到一个信号                                                                                <br/>
int pause(void)</p>

<p>alarm可以有唤醒阻塞的功能                                                                                        <br/>
for:</p>

<pre><code>alarm(10);                                                                                                     
if(read(fd,buf,MAXBUFLEN)&lt;0){                                                                                  
    exit(1);                                                                                                   
}                                                                                                              
alarm(0);                                                                                                      
</code></pre>

<p>上面代码中，如果read阻塞十秒以上，那么read就会被alarm唤醒，进入SIGALRM信号的消息句柄里。再返回read就以及是非阻塞 了，返回error<br/>
同样用alarm可以唤醒sleep</p>

<p>信号集：                                                                                                         <br/>
int sigemptyset(sigset_t  *set)                                                                                <br/>
int sigfillset(sigset_t *set)                                                                                  <br/>
int sigaddset(sigset_t *set)                                                                                   <br/>
int sigdelset(sigset_t *set)                                                                                   <br/>
//以上四个函数，成功返回0，出错返回-1                                                                            <br/>
int sigisemember(const sigset_t *set,int signo)//返回1为真，0为假，出错为-1</p>

<p>int sigprocmask(int how,const sigset_t *restrict set,const sigset_t *restrict oset) //检测或修改其信号屏蔽字 <br/>
int sigpending(sigset_t *set)<br/>
int sigaction(int signo,const struct sigaction *restrict act,struct sigaction *restrict oact)</p>

<p>下面的代码可加深对信号的理解</p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;signal.h&gt;

void hello_world(int sig )
{
    printf("hello world\n");
}

void bye_world(int sig)
{
    printf("say bye bye!\n");
    exit(1);
}

void kill_world(int sig)
{
    printf("kill world\n");
}
void alarm_world(int sig)
{
    printf("alarm world\n");
    alarm(0);
}
int main(void)
{
//  abort();
//  signal(SIGALRM,&amp;alarm_world);
    signal(SIGTERM,&amp;hello_world);
//  signal(SIGINT,&amp;bye_world);
    signal(SIGKILL,&amp;kill_world);
//  raise(SIGTERM);
    alarm(3);
    //raise(SIGKILL);
    while(1){
        sleep(1);
    }
    pause();
    printf("exit main\n");
    return 0;

}
</code></pre>

<p>题外：<br/>
信号应用在异步处理中很明显，其中最明显的是select，这个一般人最喜欢用的在socket通信里。</p>

<p>select <br/>
#include &lt;sys/select.h><br/>
int select(int maxfd,fd_set *readfds,fd_set *writefds,fd_set *exceptfds,struct timeval *timeout)<br/>
readfds,writefds,exceptfds要让内核测试读、写、异常<br/>
void FD_ZERO(fd_set *fdset)<br/>
void FD_SET(int fd,fd_set *fdset)<br/>
void FD_CLR(int fd,fd_set *fdset)<br/>
int  FD_ISSET(int fd,fd_set *fdset)<br/>
如果我们对读、写、异常中其中一个不感兴趣，可以将设置成NULL<br/>
其实可以这么理解,select就是对0～maxfd(不包括maxfd)的文件描述符里做轮寻，当检测到描述符信号变话后，唤醒，相应的fds被置位<br/>
但是由于内核中对描述符有个最大的限制，也就是select至多监控256个文件描述符。</p>

<p>poll<br/>
#include &lt;poll.h><br/>
int poll(struct pollfd *fdarray,unsigned long nfds,int timeout)<br/>
返回>0;数组fdarray中已经被激发的文件数量<br/>
==0 ;超时了，都没有被激发的文件<br/>
==-1;表示poll发生错误</p>

<pre><code>struct pollfd{  
    int fd;     //文件描述符  
    short events;   //等待的事件  
    showr revents;  //实际发生了的事件  
}  
</code></pre>

<p>timeout 的单位是ms<br/>
事件描述符:<br/>
events域中请求的任何事件都可能在revents域中返回。合法的事件如下：<br/>
POLLIN          有数据可读。<br/>
POLLRDNORM      有普通数据可读。<br/>
POLLRDBAND      有优先数据可读。<br/>
POLLPRI         有紧迫数据可读。<br/>
POLLOUT         写数据不会导致阻塞。<br/>
POLLWRNORM      写普通数据不会导致阻塞。<br/>
POLLWRBAND      写优先数据不会导致阻塞。<br/>
此外，revents域中还可能返回下列事件：<br/>
POLLER          指定的文件描述符发生错误。<br/>
POLLHUP         指定的文件描述符挂起事件。<br/>
POLLNVAL        指定的文件描述符非法。</p>

<p>poll的效率比select高很多</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装octopress]]></title>
    <link href="http://fenglifeng.github.com/blog/2012/12/09/install_octopress/"/>
    <updated>2012-12-09T17:15:00+08:00</updated>
    <id>http://fenglifeng.github.com/blog/2012/12/09/install_octopress</id>
    <content type="html"><![CDATA[<h2>安装rvm</h2>

<pre><code>curl -L get.rvm.io | bash -s stable
source ~/.bashrc
source ~/.bash_profile
</code></pre>

<h2>安装ruby 1.9.3</h2>

<pre><code>rvm install 1.9.3
rvm use 1.9.3 --default
</code></pre>

<p>详细可参见<a href="http://ruby-china.org/wiki/rvm-guide">RVM实用指南</a></p>

<h2>安装octopress</h2>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress

gem install bundler
bundle install

rake install
</code></pre>

<h2>配置博客</h2>

<p>可以在_config.yml这个配置文件里修改博客的标题，以及打开博客的评论框之类的。
比如打开评论框，在默认配置中评论框是disqus的，所以先要去注册一个disqus的用户名(http://disqus.com),然后在配置文件中的disqus_short_name中写上刚注册的名字。</p>

<p><code>rake setup_github_pages</code>  设定git发布，会让你输入git博客所对应的项目ssh的url。这样之后就将博客的url跟配置文件相对应起来。</p>

<h2>写博客</h2>

<ul>
<li><code>rake new_post['new']</code>会在_post目录下生成一个新的markdown文件，然后写这个markdown文件即可。</li>
<li><code>rake generate</code> 重新生成静态文件</li>
<li><code>rake preview</code>本地浏览，127.0.0.1:4000查看效果</li>
<li><code>rake deploy</code>将内容发布至博客中<br/>
一般情况是这样的，写完博客之后先生成静态文件，然后再本地浏览，如果没问题，就可以发布了，如果有问题，就重新写，然后要重新生成静态文件。<br/>
如果遇到生产静态文件的时候报错，文件不是utf-8类型的，要将文件转换成utf-8。特别是有中文的情况下特别容易报错，最简单的解决方法是在vim 中使用命令set fileencoding=utf-8</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[矩阵相乘]]></title>
    <link href="http://fenglifeng.github.com/blog/2012/12/09/multiply/"/>
    <updated>2012-12-09T00:00:00+08:00</updated>
    <id>http://fenglifeng.github.com/blog/2012/12/09/multiply</id>
    <content type="html"><![CDATA[<pre><code>#include &lt;stdio.h&gt;  
#include &lt;string.h&gt;  
#include &lt;malloc.h&gt;  
void matrix_multiply(int *m1,int *m2,   
     int x,int y,int z)  
{  
    int reval[x][z];  
    memset(reval,0,sizeof(int)*x*y);  
    int i,j,k;  
    for(i=0;i&lt;x;i++)  
        for(j=0;j&lt;z;j++)  
            for(k=0;k&lt;y;k++){  
                reval[i][j] += *(m1+i*y+k) * (*(m2+k*z+j));  
         }  
    for(i=0;i&lt;x;i++){  
        for(j=0;j&lt;z;j++)  
            printf("%6d",reval[i][j]);  
         printf("\n");  
     }  
}  
int main(void)  
{  
     int a[2][3]={2,-6,3,5,1,-1};  
     int b[4][2]={4,-2,-4,-5,-7,-3,6,7};  
     matrix_multiply(&amp;a[0][0],&amp;b[0][0],3,2,4);  
    return 0;  

}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the first blog test]]></title>
    <link href="http://fenglifeng.github.com/blog/2012/12/06/test/"/>
    <updated>2012-12-06T09:59:00+08:00</updated>
    <id>http://fenglifeng.github.com/blog/2012/12/06/test</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
